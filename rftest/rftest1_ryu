#!/bin/bash
OVSSOCK=/tmp/openvswitch-db.sock
VSCTL="ovs-vsctl --db=unix:$OVSSOCK"

MONGODB_PORT=27017
CONTROLLER_PORT=6633

if [ "$EUID" != "0" ]; then
  echo "You must be root to run this script."
  exit 1
fi

ACTION=""
case "$1" in
--ryu)
    ACTION="RYU"
    ;;
--reset)
    ACTION="RESET"
    ;;
*)
    echo "Invalid argument: $1"
    echo "Options: "
    echo "    --pox: run using POX"
    echo "    --nox: run using NOX"
    echo "    --reset: stop running and clear data from previous executions"
    exit
    ;;
esac

LXCDIR=/var/lib/lxc
RF_HOME=..
export PATH=$PATH:/usr/local/bin:/usr/local/sbin
export PYTHONPATH=$PYTHONPATH:$RF_HOME

cd $RF_HOME

wait_port_listen() {
    port=$1
    while ! `nc -z localhost $port` ; do
        echo -n .
        sleep 1
    done
}

echo_bold() {
    echo -e "\033[1m${1}\033[0m"
}

kill_process_tree() {
    top=$1
    pid=$2

    children=`ps -o pid --no-headers --ppid ${pid}`

    pkill -f "ofdatapath"
    pkill -f "ofprotocol"

    for child in $children
    do
        kill_process_tree 0 $child
    done

    if [ $top -eq 0 ]; then
        kill -9 $pid &> /dev/null
    fi
}

reset() {
    init=$1;
    if [ $init -eq 1 ]; then
        echo_bold "-> Starting OVS daemons...";
        # Always try to start OVS
        ovsdb-server --remote=punix:/usr/local/var/run/openvswitch/db.sock \
	                         --remote=db:Open_vSwitch,manager_options \
	                         --private-key=db:SSL,private_key \
	                         --certificate=db:SSL,certificate \
	                         --bootstrap-ca-cert=db:SSL,ca_cert \
	                         --pidfile --detach
        ovs-vswitchd --pidfile --detach
    else
        echo_bold "-> Stopping child processes...";
        kill_process_tree 1 $$
    fi

    sudo $VSCTL del-br sw0 &> /dev/null;
    sudo $VSCTL del-br br0 &> /dev/null;
    sudo $VSCTL del-br dp0 &> /dev/null;
    sudo $VSCTL del-br switch1 &> /dev/null;
    sudo $VSCTL emer-reset &> /dev/null;

    echo_bold "-> Stopping and resetting LXC VMs...";
    lxc-stop -n rfvm1 &> /dev/null;
    lxc-stop -n b1 &> /dev/null;
    lxc-stop -n b2 &> /dev/null;

    rm -rf $LXCDIR/rfvm1/rootfs/var/run/network/ifstate;
    rm -rf $LXCDIR/b1/rootfs/var/run/network/ifstate;
    rm -rf $LXCDIR/b2/rootfs/var/run/network/ifstate;

    echo_bold "-> Deleting data from previous runs...";
    rm -rf $HOME/db;
    rm -rf /var/lib/lxc/rfvm1/rootfs/opt/rfclient;
}
reset 1
trap "reset 0; exit 0" INT

if [ "$ACTION" != "RESET" ]; then
    echo_bold "-> Starting MongoDB..."
    mkdir $HOME/db
    mongod --quiet --dbpath $HOME/db --logpath /dev/null &
    wait_port_listen $MONGODB_PORT

    echo_bold "-> Starting the rfvm1 virtual machine..."
    # Create the rfclient dir
    mkdir /var/lib/lxc/rfvm1/rootfs/opt/rfclient

    # Copy the rfclient executable
    cp build/rfclient /var/lib/lxc/rfvm1/rootfs/opt/rfclient/rfclient

    cp /usr/lib/libmongoclient.a /var/lib/lxc/rfvm1/rootfs/usr/lib
    cp /usr/lib/libmongoclient.so /var/lib/lxc/rfvm1/rootfs/usr/lib

    # We sleep for a few seconds to wait for the interfaces to go up
    echo "#!/bin/sh" > /var/lib/lxc/rfvm1/rootfs/root/run_rfclient.sh
    echo "sleep 5" >> /var/lib/lxc/rfvm1/rootfs/root/run_rfclient.sh    
    echo "/opt/rfclient/rfclient > /var/log/rfclient.log" >> /var/lib/lxc/rfvm1/rootfs/root/run_rfclient.sh

    chmod +x /var/lib/lxc/rfvm1/rootfs/root/run_rfclient.sh

    lxc-start -n rfvm1 -d

    echo_bold "-> Starting the management network (br0)..."
	$VSCTL add-br br0 \
		-- add-port br0 rfvm1.0
    ifconfig br0 up
    ifconfig br0 192.169.1.1

    echo_bold "-> Starting the controller ($ACTION) and RFPRoxy..."
    case "$ACTION" in
    RYU)
	ryu-manager ryu/ryu/app/rfproxy_v1_2.py &
        ;;
    esac
    wait_port_listen $CONTROLLER_PORT

    echo_bold "-> Starting RFServer..."
    ./rfserver/rfserver.py rftest/rftest1config.csv &


    echo_bold "-> Starting the control plane network (dp0 VS)..."
	ofdatapath --no-slicing punix:/var/run/s7266.sock --datapath-id=726676737266 --interfaces=rfvm1.1,rfvm1.2 1> /tmp/s7266-ofd.log 2>/tmp/s7266-ofd.log &

	ofprotocol unix:/var/run/s7266.sock tcp:localhost:6633 1> /tmp/s7266-ofp.log 2>/tmp/s7266-ofp.log &


    echo_bold "-> Starting the sample network..."
    lxc-start -n b1 -d
    lxc-start -n b2 -d
	ofdatapath --no-slicing punix:/var/run/s7266.sock --datapath-id=000000000153 --interfaces=b1.0,b2.0 1> /tmp/s7266-ofd.log 2>/tmp/s7266-ofd.log &

	ofprotocol unix:/var/run/s7266.sock tcp:localhost:6633 1> /tmp/s7266-ofp.log 2>/tmp/s7266-ofp.log &

    echo_bold "---"
    echo_bold "This test is up and running."
    echo_bold "Try pinging host b2 from host b1:"
    echo_bold "  $ sudo lxc-console -n b1"
    echo_bold "Login and run:"
    echo_bold "  $ ping 172.31.2.2"
    echo_bold "You can stop this test by pressing Ctrl+C."
    echo_bold "---"
    wait
fi
exit 0
